TouchableOpacity//User selection between SignIn & Create Account Screen
import React, { Component } from 'react'
import { Text, View, ScrollView, TouchableOpacity, TextInput, Image, StyleSheet,CheckBox,Dimensions, ActivityIndicator, Alert } from 'react-native'
//Library
import messaging from '@react-native-firebase/messaging';
import * as Animatable from 'react-native-animatable';
import MaterialIcon from 'react-native-vector-icons/MaterialIcons';
import LinearGradient from 'react-native-linear-gradient';
import { showMessage, hideMessage } from "react-native-flash-message";
import { KeyboardAwareScrollView } from "react-native-keyboard-aware-scroll-view";
//Components
import Header from '../../../../components/Header';
import Checkbox from '../../../../components/Checkbox';
//API
import HttpRequest from '../../../../utils/HTTPRequest';
import { Images } from '../../../../constants';
import COLORS from "../../../../constants/colors";
import AsyncStorage from "../../../../utils/AsyncStorage";

import { strings } from '../../../../utils/translations';
//Redux
import { connect } from 'react-redux';
import { userInfo, Chessis_no } from '../../../../Redux/Actions/Actions';
import { bindActionCreators } from 'redux';

import ImagePicker from 'react-native-image-picker';
import * as Progress from 'react-native-progress';
import axios from "axios";
import { SelectList } from 'react-native-dropdown-select-list'

import AudioRecorderPlayer, {
    AVEncoderAudioQualityIOSType,
    AVEncodingOption,
    AudioEncoderAndroidType,
    AudioSet,
    AVModeIOSOption,
    AudioSourceAndroidType,
  } from "react-native-audio-recorder-player";
import { duration } from 'moment';

const audioRecorderPlayer = new AudioRecorderPlayer();

const { width, height } = Dimensions.get('window');
class breakdown extends Component {
  constructor(props) {
    super(props);

    this.onFocus = this.onFocus.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.onChangeText = this.onChangeText.bind(this);
    this.onSubmitName = this.onSubmitName.bind(this);
    this.onSubmitPhone = this.onSubmitPhone.bind(this);
    this.onSubmitPassword = this.onSubmitPassword.bind(this);
    this.onSubmitEmail = this.onSubmitEmail.bind(this);
    this.onRefId = this.onRefId.bind(this);

    this.onAccessoryPress1 = this.onAccessoryPress1.bind(this);
    this.onAccessoryPress2 = this.onAccessoryPress2.bind(this);

    // this.nameRef = this.updateRef.bind(this, 'customer_name');
    this.phoneRef = this.updateRef.bind(this, 'customer_contact');
    this.passwordRef = this.updateRef.bind(this, 'customer_doc_type');
    // this.emailRef = this.updateRef.bind(this, 'customer_doc_no');
    this.refIdRef = this.updateRef.bind(this, 'refId');

    this.renderPasswordAccessory1 = this.renderPasswordAccessory1.bind(this);
    this.renderPasswordAccessory2 = this.renderPasswordAccessory2.bind(this);


    this.state = {
      secureTextEntry: true,
      isLoading: false,
    //   customer_name: "",
      customer_contact: "",
      document_type:[],
      customer_doc_type: "",
      repeatPass: "",
      customer_doc_no: "",
      refId: "",
      filePath: "",
      passkey: "",
    
      audio:"",
      userInfo: null,
      
     recording:false,
      recordSecs: 0,
      recordTime: "00:00:00",
      currentPositionSec: 0,
      currentDurationSec: 0,
      playTime: "00:00:00",
      duration: "00:00:00",
    };
    this.audioRecorderPlayer = new AudioRecorderPlayer();
    this.audioRecorderPlayer.setSubscriptionDuration(0.01);
  }
  componentDidMount = () => {
    this.document();
    this._getChargingStation = this.props.navigation.addListener('focus', () => {
      AsyncStorage.getDealer_pass_key().then(result => {
        // console.log('toggle', val);
        if (result != null && result != '') {
          console.log('passkey', result);

          this.setState({
            passkey: result
          });
          // this.getChargingStations();
        }

      });

      // this.getCurrentLocation();
      // this.dealervalue();
      // this.getChargingStations();


    });
    //   this.tokenn();

  }

  componentWillUnmount() {
    this._getChargingStation();
  }

  onFocus() {
    let { errors = {} } = this.state;
    for (let name in errors) {
      let ref = this[name];

      if (ref && ref.isFocused()) {
        delete errors[name];
      }
    }

    this.setState({ errors });
  }

  onChangeText(text) {
    [ 'customer_contact']
      .map((name) => ({ name, ref: this[name] }))
      .forEach(({ name, ref }) => {
        if (ref.isFocused()) {
          this.setState({ [name]: text });
        }
      });
  }

  onAccessoryPress1() {
    this.setState(({ secureTextEntry1 }) => ({ secureTextEntry1: !secureTextEntry1 }));
  }

  onAccessoryPress2() {
    this.setState(({ secureTextEntry2 }) => ({ secureTextEntry2: !secureTextEntry2 }));
  }

  onSubmitName() {
    this.phone.focus();
  }

  onSubmitPhone() {
    this.password.focus();
  }

  onSubmitPassword() {
    this.repeatPass.focus();
  }
  onSubmitEmail() {
    this.email.focus();
  }
  onRefId() {
    this.refral.focus();
    this.onSubmit();
  }

  tokenn() {
    messaging().getToken().then(token => {
      // this.props.deviceToken(token);
      this.setState({ deviceToken: token })
      console.log(this.state.deviceToken, 'asdfgh');
    });
  }

onStartRecord = async () => {
   
    const result = await this.audioRecorderPlayer.startRecorder();
  this.audioRecorderPlayer.addRecordBackListener((e) => {
    // console.log(e,'e');
    this.setState({
      recordSecs: e.currentPosition,
      recordTime: this.audioRecorderPlayer.mmssss(
        Math.floor(e.currentPosition),
      ),recording:true
    });
    return;
  });
   console.log('record',this.state.recordTime);
 
  };

onStopRecord = async () => {
    const result = await this.audioRecorderPlayer.stopRecorder();
    this.audioRecorderPlayer.removeRecordBackListener();
    this.setState({
      recordSecs: 0,
    });
this.setState({audio:result,recording:false});
     console.log("audio result",result);
}
onStartPlay = async (e) => {
    console.log('onStartPlay');
    const msg = await this.audioRecorderPlayer.startPlayer();
    console.log(msg);
    this.audioRecorderPlayer.addPlayBackListener((e) => {
      this.setState({
        currentPositionSec: e.currentPosition,
        currentDurationSec: e.duration,
        playTime: this.audioRecorderPlayer.mmssss(Math.floor(e.currentPosition)),
        duration: this.audioRecorderPlayer.mmssss(Math.floor(e.duration).toFixed(2)),
      });
console.log('play',this.state.playTime);
console.log('play1',this.state.duration);
      return;
    });
  };


onPausePlay = async (e) => {
    await this.audioRecorderPlayer.pausePlayer();
  };

  onStopPlay = async (e) => {
    console.log("onStopPlay");
    this.audioRecorderPlayer.stopPlayer();
    this.audioRecorderPlayer.removePlayBackListener();
  };

  onSubmit() {
    console.log('sign ue');

    let errors = {};
    let { isSelected } = this.state;
    let reg = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;

    //     ['customer_name', 'customer_contact', 'password','customer_doc_no']
    //       .forEach((name) => {
    //         let value = this.state[name];

    //         if (!value) {
    //           errors[name] = strings.error.emptyError;
    //           console.log('sign ue1',);
    //         } 
    //         else {
    //           if ('phone' === name && value.length < 10 ) {
    //             errors[name] = strings.error.phoneError;
    //           } else if ('password' === name && value.length < 6) {
    //             errors[name] = strings.error.passwordLengthError;
    //           }
    //           //  else if ('repeatPass' === name && value.length < 6) {
    //           //   errors[name] = strings.error.passwordLengthError;
    //           // } else if('repeatPass' === name && value !== this.state.password){
    //           //   errors[name] = strings.error.passwordUnmatchedError;
    //           // }
    //         //   else if ('email' === name && reg.test(this.state.email)===false ){
    //         //      console.log('sign ue',this.state.email);
    //         //     errors[name] = strings.error.emailLengthError;
    //         //    }
    //           //  else if ('refId' === name && value==) {
    //           //   errors[name] = strings.error.passwordLengthError;
    //           // }
    //         }
    //       });

    //     this.setState({ errors });
    //     if(Object.entries(errors).length === 0 && isSelected){
    //       console.log('sign ue3',);
    this.onSignupPressed();
    //     } else if(Object.entries(errors).length === 0 && !isSelected) {
    //       showMessage({
    //           message: strings.error.warningTitle,
    //           description: strings.error.termsAndConditions,
    //           type: "warning",
    //           duration: 2000
    //         });
    //   }
  }

  updateRef(name, ref) {
    this[name] = ref;
  }

  Scanner() {
console.log('scan');
    let options = {
      title: 'Select Image',
      base64: true,
      customButtons: [
        {
          name: 'customOptionKey',
          title: 'Choose Photo from Custom Option'
        },
      ],
      storageOptions: {
        skipBackup: true,
        path: 'images',
      },

    };

    // const result = await launchImageLibrary(cameraType);
    ImagePicker.showImagePicker(options, (response) => {
      console.log('Response = ', response);

      if (response.didCancel) {
        console.log('User cancelled image picker');
      } else if (response.error) {
        console.log('ImagePicker Error: ', response.error);
      } else if (response.customButton) {
        console.log(
          'User tapped custom button: ',
          response.customButton

        );
        alert(response.customButton);
      } else {
        let source = response;
        // You can also display the image using data:
        // let source = {
        //   uri: 'data:image/jpeg;base64,' + response.data
        // };
        this.setState({ filePath: source });
        console.log("filepath", this.state.filePath.uri);
      }
    });

  }

  document ()
  {
    HttpRequest.serive_list()
    .then(res => {
      this.setState({ isLoading: false });
      //  console.log("Phone Number Check api response ---------- ", res);
      const result = res.data;
      console.log("Service list api response ---------- ", result);
      if (res.status == 200 && result.error==false) {
      // console.log("service list",result.data);
       this.setState({document_type:result.data})
      // console.log(this.state.Service_Type,'service');
      //  this.props.navigation.navigate("serviceotp",{mobile:this.state.customer_contact,chessis_no:this.state.customer_name,Service_Type:this.state.Service_Type,Service_Detail:this.state.Service_Detail});
         
      }
      else {
          Alert.alert("Alert",result.message);
          // this.props.navigation.navigate("OtpVerification", { mobile: phone, type: 0, formData: { name: name, phone: phone, password: password,email:email,refId:refId,device_token:deviceToken, role: 1 } });
      }
    })
    .catch(err => {
      this.setState({ isLoading: false });
      console.log("Phone Number Check API Catch Exception: ",err);
      showMessage({
        message: strings.signIn.response.error.title,
        description: strings.signIn.response.error.message,
        type: "danger",
      });
    });

  }
  renderPasswordAccessory1() {
    let { secureTextEntry1 } = this.state;

    let name = secureTextEntry1 ?
      'visibility-off' :
      'visibility';

    return (
      <MaterialIcon
        size={20}
        name={name}
        color={'#05294b'}
        style={styles.icon}
        onPress={this.onAccessoryPress1}
        suppressHighlighting={true}
      />
    );
  }

  renderPasswordAccessory2() {
    let { secureTextEntry2 } = this.state;

    let name = secureTextEntry2 ?
      'visibility-off' :
      'visibility';

    return (
      <MaterialIcon
        size={20}
        name={name}
        color={'#05294b'}
        style={styles.icon}
        onPress={this.onAccessoryPress2}
        suppressHighlighting={true}
      />
    );
  }

  // Self User Signup Through Api
  onSignupPressed = () => {
let {props}=this;
console.log('redux',props);
    let {chargingPointData, filePath} = this.state;
    //  this.setState({chargingPointData:this.state.tax});
    console.log('ok',this.state.filePath.fileName);
    if (filePath == null || filePath =="") {
       
      Alert.alert("Please Select payment proof");
      console.log('ok1');
  }else{
    console.log('pics',this.state.filePath);
      var pics=filePath.data;
      
      var data = new FormData();
data.append('image',pics);
data.append('chessis_no',props.chessis);
data.append('phone_no',props.info.phone);
data.append('service_detail',this.state.customer_contact);
data.append('file', {
  uri:
    Platform.OS === 'android'
      ? this.state.audio
      : this.state.audio.replace('file://', ''),
 name: 'sound.mp4',
  type: 'audio/mp4',
  // name: 'sound.mp4',
  // type: 'video/mp4',
  // uri: result,
});
data.append('service_type',this.state.service_name);
console.log(data,'data');
fetch('https://mobility.efillelectric.com/api/user/service-submit', {
  method: 'POST',
  body: data,
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'multipart/form-data',
  },
})

  .then((response) => response.json())
  .then((response) => {
    console.log('upload succes', response);

    this.props.navigation.navigate('Services');
  })
  .catch((error) => {
    console.log('upload error', error);
    alert('Upload failed!',error);
  });
  };


  
 

  };

  handleCheckbox = (checkbox) => {
    this.setState({ isSelected: checkbox });
  }

  labelCheck = () => {
    let { isSelected } = this.state;
    this.setState({ isSelected: !isSelected });
  }

  render() {
    let { navigation } = this.props;
    
    let { isLoading, errors = {}, recording, document_type, playTime, filePath, refId, percentage,customer_doc_no, customer_contact, customer_doc_type, repeatPass, duration } = this.state;
  
    const errorPhone = errors.phone == undefined ? '#808080' : '#ff0000';
    
     console.log(this.state.recording);
    return (
      <View style={styles.container}>
        <View style={styles.header}>
          <Header navigation={navigation} type={strings.dmc.soldForm.title1} />
        </View>
        <Animatable.View animation="fadeInUpBig" style={styles.footer}>
          <KeyboardAwareScrollView enableOnAndroid={true} extraHeight={130} extraScrollHeight={130} contentContainerStyle={styles.scrollView}>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.users.types}</Text>
              <View>
              <SelectList boxStyles={styles.box}
                          search={false}
                          setSelected={(data)=>this.setState({service_name:data})}
                        //   setSelected={(data)=>this.setState({customer_doc_type:data})}
                          placeholder="Service Type"
                            data={document_type}
                           notFoundText="No data found"
                           dropdownItemStyles={styles.dropdown}
                            // save="service_name"
                          />
              </View>
              {errors.name != undefined &&
                <Text style={styles.error}>{errors.name}</Text>
              }
            </View>
            
        
            {filePath != '' ?
              <Image
                source={{ uri: filePath.uri }}
                style={styles.imageStyle}
              />
              : null}

<View style={styles.formField}>
              <Text style={styles.label}>{strings.users.issues}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  ref={this.phoneRef}
                  placeholder="Enter the Service details"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}

                  enablesReturnKeyAutomatically={true}
                  onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_contact}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {/* {errors.phone != undefined &&
                <Text style={styles.error}>{errors.phone}</Text>
              } */}
            </View>
            <View style={styles.row}>
               {/* <Text style={{textAlign:'center',fontWeight:'800',color:'#fff',marginTop:10}}>{percentage}</Text> */}
               
                    <View style={{paddingTop:10,justifyContent:'center',alignContent:'center',marginLeft:8}}>
                      {recording==true?

                          <Text style={{ flexDirection:'row',textAlign: 'center', fontWeight: '800', color: '#fff' }}>Recording</Text>
                        
                      : 
                      <Text style={{ textAlign: 'center', fontWeight: '800', color: '#fff', marginTop: 10 }}>{playTime}</Text>
                      }
                   
                    {/* /<Progress.Bar progress={playTime} width={width-20}/> */}
                    </View>
                    </View>
                   
                        
                    <View style={styles.row1}>
                      
                    <View style={styles.availabilityIconContainer}>
                <TouchableOpacity activeOpacity={0.8} style={styles.IconButton} onPress={()=>this.onStartRecord()}>
                  <Image source={Images.voice} style={styles.imageIcon} />
                </TouchableOpacity>
                <Text style={{textAlign:'center',fontWeight:'800',color:'#fff',marginTop:5}}>Record</Text>
              </View>  
              {recording==true?
              <View style={styles.availabilityIconContainer}>
             
                <TouchableOpacity activeOpacity={0.8} style={styles.IconButton} onPress={()=>this.onStopRecord()}>
                
                  <Image source={Images.stop} style={styles.imageIcon} />

                </TouchableOpacity>
               
                <Text style={{textAlign:'center',fontWeight:'800',color:'#fff',marginTop:5}}>Stop</Text>
              </View> 
               : 
               <View style={[styles.availabilityIconContainer,{marginEnd:20}]}>
               <TouchableOpacity activeOpacity={0.8} style={styles.IconButton} onPress={()=>this.onStartPlay()}>
                 <Image source={Images.play} style={styles.imageIcon} />
                
               </TouchableOpacity>
               <Text style={{textAlign:'center',fontWeight:'800',color:'#fff',marginTop:5}}>Play</Text>
           
             </View>  } 
             
              </View>
              <View style={styles.availabilityIconContainer}>
            <TouchableOpacity onPress={!isLoading ? () => this.Scanner() : null}>
              <LinearGradient start={{ x: 0, y: 0 }} end={{ x: 1, y: 0 }} colors={['#A4FF8B', '#22BC9D']} style={styles.IconButton}>
                {isLoading ? <ActivityIndicator size='large' color='#fff' /> :
                  <Image source={Images.camera} style={styles.imageIcon} />
                  
                }
                
              </LinearGradient>
              
            </TouchableOpacity>
            </View>
            <Text style={{textAlign:'center',fontWeight:'800',color:'#fff',marginTop:5}}>Upload Image</Text>
            <TouchableOpacity onPress={!isLoading ? () => this.onSubmit() : null}>
              <LinearGradient start={{ x: 0, y: 0 }} end={{ x: 1, y: 0 }} colors={['#A4FF8B', '#22BC9D']} style={styles.signInButton}>
                {isLoading ? <ActivityIndicator size='large' color='#fff' /> :
                  <Text style={styles.buttonText}>Submit</Text>
                }
              </LinearGradient>
            </TouchableOpacity>
          </KeyboardAwareScrollView>
        </Animatable.View>
      </View>
    )
  }
}
let screenWidth = Dimensions.get('window').width;
// Retrieve initial screen's height
let screenHeight = Dimensions.get('window').height;

const styles = StyleSheet.create({
    container: {
      flex:1,
      backgroundColor: COLORS.PRIMARY,
      zIndex: 9999,
    },
    header: {
        flex: 1,
        justifyContent: 'flex-start',
        alignItems: 'center'
    },
    scrollView: {
        flexGrow: 1,
        justifyContent: 'flex-start',
        alignItems: 'center'
    },
    onBoardImage: {
        width: screenHeight * 0.5,
        height: screenHeight * 0.2,
        resizeMode:'contain'
    },
    footer: {
        flex: 8,
        flexDirection: 'column',
        justifyContent: 'flex-start',
        alignItems: 'center',
        marginTop: '3%'
    },
    title: {
        color: COLORS.DEFAULT,
        fontSize: 38,
        fontFamily: "Poppins-Regular",
        fontWeight: '600',
        lineHeight: 40,
    },
    text: {
        color: COLORS.DEFAULT,
        fontSize: 12,
        fontFamily: "Poppins-medium",
        marginTop: 20
    }, 
    button: {
        width: screenWidth - 40 ,
        height: 60,
        justifyContent: 'center',
        alignItems: 'center',
        borderRadius: 30,
        backgroundColor: COLORS.DEFAULT,
        fontFamily: "Poppins-Regular",
        color: 'black',
        marginTop:  20
    },
    row: {
        flexDirection: 'row',
        marginVertical: 5,
       
  
    },
    row1: {
        width:screenWidth-90,
        flexDirection: 'row',
        justifyContent:'space-evenly',
         marginVertical: 5,
        //  backgroundColor:'#fff',
        marginRight:20,
        marginLeft:40,
  
    },
    buttonText: {
        color: COLORS.BUTTON_TEXT,
        fontSize: 16,
        fontWeight: '500',
        textAlign: 'center',
        fontFamily: "Poppins-Regular",
    },
    formField: {
        width: screenWidth - 40 ,
        margin: 5
    },
    label: {
        fontSize: 14,
        fontFamily: "Poppins-Regular",
        color: COLORS.DEFAULT,
        margin: 5,
        marginLeft: 15
    },
    IconButton: {
        position: 'relative',
        width: 45,
        height: 45,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: COLORS.HEADER_BACKGROUND,
        borderRadius: 55 / 2,
    },
    imageIcon: {
        width: 25,
        height: 25,
        resizeMode: 'contain',
    },
    box:{
        flexGrow:1,
        flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    height: 50,
    width: screenWidth - 40 ,
    paddingHorizontal: 10,
    zIndex: 1,
    },
    dropdown: {
        flexGrow:1,
        flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    height: 50,
    width: screenWidth - 40 ,
    paddingHorizontal: 10,
    zIndex: 999,
      },
    inputContainer: {
        width: screenWidth - 40 ,
        height: 80, 
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        paddingLeft: 20,
        paddingRight: 20,
        backgroundColor: COLORS.DEFAULT,
        color: COLORS.black,
        borderRadius: 10,
    },
    imageStyle: {
        marginTop:10,
     width: screenWidth-90 ,
        height: 100,
        // margin: 5,
        //  marginTop:-50,
        marginLeft:50,
        marginRight:50,
        borderRadius: 10,
        justifyContent: 'center',
        alignItems: 'center',
      },
      availabilityIconContainer: {
        position: 'relative',
        // top: '42%',
       
         alignSelf: 'center',
        marginTop:10,
       
    },
    availIconContainer: {
        position: 'relative',
        // top: '42%',
         alignSelf: 'center',
       marginLeft:20,
    },
    inputText: {
        flex:1,
        height:'100%',
        fontSize: 16,
        fontFamily: "Poppins-Regular",
        color: COLORS.black,
        marginLeft: '3%'
    },
    error: {
        fontSize: 12,
        fontFamily: "Poppins-Regular",
        marginLeft: 15,
        padding: 5,
        color: '#ff0000',
    },
    signInButton: {
        width: screenWidth - 80 ,
        height: 50,
        justifyContent: 'center',
        alignItems: 'center',
        borderRadius: 10,
        backgroundColor: COLORS.DEFAULT,
        fontFamily: "Poppins-Regular",
        color: 'black',
        marginTop: 15
    },
    uploadButton: {
        width: screenWidth - 200 ,
        height: 40,
        justifyContent: 'center',
        alignItems: 'center',
        borderRadius: 10,
        backgroundColor: COLORS.DEFAULT,
        fontFamily: "Poppins-Regular",
        color: 'black',
        marginTop: 15
    },
    signIn: {
       width: 70,
       height: 70,
       justifyContent: 'center', 
       alignItems: 'center',
       borderRadius: 70/2,
    },
    backIcon: {
        width: '100%',
        height: '100%',
        resizeMode: 'cover'
    },
    textSign: {
        color: COLORS.DEFAULT,
        fontWeight: 'bold',
        margin: 5
    },
    infoText: {
        fontSize: 12,
        fontFamily: "Poppins-Regular",
        color: COLORS.DEFAULT,
        marginTop: 50,
        marginBottom: 50,
        textAlign: 'center'
    },
    checkboxContainer: {
        flexDirection: "row",
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 20
    },
    checkbox: {
        width: 20,
        height: 20,
        alignSelf: "center",
        color: '#fff',
        borderColor: '#A4FF8B',
        borderRadius: 5
    },
    checkboxLabel:{
        color: COLORS.DEFAULT,
        fontSize: 12,
        fontFamily: "Poppins-medium",
        marginLeft: 5
    }
});
const mapStateToProps = state => {
    
    return {
        chessis: state.Chessis_no,
        info: state.info,
    };
  };
  
  
  const mapDispatchToProps = (dispatch) => {
    return{
    userInfo: bindActionCreators(userInfo, dispatch),
    }
     
  }
  export default connect(mapStateToProps,mapDispatchToProps)(breakdown);



//User selection between SignIn & Create Account Screen
import React, { Component } from 'react'
import { Text, View, Image, TouchableOpacity, FlatList, RefreshControl, ActivityIndicator, Dimensions, StyleSheet } from 'react-native';
//Library
import * as Animatable from 'react-native-animatable';
import Icon from 'react-native-vector-icons/Ionicons';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import LinearGradient from 'react-native-linear-gradient';
import Geolocation from '@react-native-community/geolocation';
import StarRating from 'react-native-star-rating';
import { showMessage, hideMessage } from "react-native-flash-message";
import { TouchableRipple } from 'react-native-paper';
//Components
import Header from '../../../components/Header';
//Constants
import { Images } from "../../../constants/";
//Api
import HttpRequest from "../../../utils/HTTPRequest";
//Redux
import { connect } from 'react-redux';
import { userInfo,Chessis_no } from '../../../Redux/Actions/Actions';
import { bindActionCreators } from 'redux';
import { strings } from '../../../utils/translations';
// Theme Colors
import COLORS from "../../../constants/colors";

import AsyncStorage from "../../../utils/AsyncStorage";
import { Badge } from 'react-native-paper';

const wait = (timeout) => {
    return new Promise(resolve => {
      setTimeout(resolve, timeout);
    });
}

let { width, height } = Dimensions.get('window');
const ASPECT_RATIO = width / height;
const LATITUDE = 28.9345800;
const LONGITUDE = 77.0923800;
const LATITUDE_DELTA = 0.0522;
const LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;
var  df="";
const geolib = require('geolib');
const amd=[];
class Document extends Component {
    constructor(props){
        super(props);

        this.state = {
            isLoading: true,
            chargingPointData: '',
             favorite: false,
             distance:0,
             orders: 0,
             passkey:'',
           
            refreshing: false,
        };
    }

    componentDidMount = () => {
        this._getChargingStation = this.props.navigation.addListener('focus', () => {
            this.getChargingStations();
            
            // this.getCurrentLocation();
            // this.dealervalue();
            // this.getChargingStations();
           
        });
        // setTimeout(this.getChargingStations,2000);
    }

    componentWillUnmount() {
        this._getChargingStation();
    }

   

    getChargingStations = () => {
        let { props } = this;
        let { radius, region } = this.state;
        console.log(props,'region')
      
        HttpRequest.user_docs({chessis_no:props.chessis})
            .then(res => {
                
                const result = res.data;
                console.log("Orders API Response ---------- ", result.data);
                if (res.status == 200 ) {
                     this.setState({ chargingPointData: result.data, refreshing: false, isLoading: false})
                    console.log("distance",this.state.chargingPointData);
                } else {
                    this.setState({ isLoading: false });
                    console.log("Orders API Error : ",result);
                    showMessage({
                       message: strings.error.title,
                        description: result.message != undefined ? result.message : result.status,
                        type: "danger",
                    });
                }
            })
            .catch(err => {
                this.setState({ isLoading: false, refreshing: false });
                console.log("Orders API Catch Exception: ",err);
                showMessage({
                   message: strings.error.title,
                    description: strings.error.message,
                    type: "danger",
                });
            });


    }

   
  
    navigate(item){
        console.log('navi',item)
        this.props.navigation.navigate('detailsOrder',{item});
    }

    renderItem = ({ item }) => (
        <View style={styles.item} activeOpacity={.7}>
           <View style={styles.itemHeader}>
                {/* Charging Station Image & Ratings */}
                <View style={styles.row}>
                    <Image source={{ uri: item.service_icon }} style={styles.image} />
                    <View style={[styles.content, { flex: 3 }]}>
                        <View style={styles.row}>
                            <Text style={[styles.text, styles.title]} numberOfLines={1}>Yes</Text>
                        </View>
                    </View>
                </View>
               

            </View>
        </View>
    );

    listEmptyComponent = () => (
        <View style={styles.noDataFoundContainer}>
            <Text style={styles.noDataFoundText}>No Data Found</Text>
        </View>
    )
    
    render() {
        let { navigation } =  this.props;
        let { isLoading, item, refreshing,favorite,orders,chargingPointData} = this.state;
        //   console.log(orders,'this.props');
        return (
            <View style={styles.container}>
                <View  style={styles.header}>
                  <Header navigation={navigation} type={strings.users.doc}/>
                </View>
                {/* {orders != 0 ?
                <View style={styles.goku}>
                  {orders > 0 ?
                    <Badge style={styles.badge} size={20}>{orders}</Badge> : null
                  }
                <TouchableOpacity activeOpacity={0.8} style={styles.iconButton} onPress={()=>this.props.navigation.navigate('Cart')} >
                  <Image source={Images.cart} style={styles.imageIcon} />
                </TouchableOpacity>
             
                </View>
                : null} */}
                <Animatable.View animation="zoomInUp" style={styles.footer}>
                    { isLoading ?  
                        <View style={styles.noDataFoundContainer}>
                            <ActivityIndicator size='large' color='#fff' /> 
                        </View>
                    : 
                    <FlatList
                        data={chargingPointData}
                        renderItem={this.renderItem}
                        keyExtractor={item => item.id+""}
                        ListEmptyComponent={() => this.listEmptyComponent()}
                        refreshControl={
                            <RefreshControl refreshing={refreshing} onRefresh={this.onRefresh} tintColor={'#fff'}/>
                        }
                    /> }
                </Animatable.View>
            </View>
        )
    }
}
let screenWidth = Dimensions.get('window').width;
// Retrieve initial screen's height
let screenHeight = Dimensions.get('window').height;

const styles = StyleSheet.create({
    container: {
      flex:1,
      justifyContent: 'center',
      backgroundColor: COLORS.PRIMARY,
    //   zIndex: 9999,
    },
    header: {
        flex: 1,
        justifyContent: 'flex-start',
        alignItems: 'center'
    },
    footer: {
        flex: 8,
        flexDirection: 'column',
        justifyContent: 'flex-start',
        marginBottom:20,
        // marginTop: '10%',
    },
    buttonTexts: {
        color: COLORS.BUTTON_TEXT,
        fontSize: 12,
        fontWeight: '500',
        textAlign: 'center',
        fontFamily: "Poppins-Regular",
    },
    description: {
        fontSize: 12,
        color: COLORS.DEFAULT,
        fontWeight: '400',
        fontFamily: "Poppins-Regular",
        color: COLORS.LIGHT_BLACK
    },
    text1: {
        color: COLORS.ERROR,
        fontSize: 14, 
        // margin:5,
        fontWeight:'bold',
        fontFamily: "Poppins-medium",
      
    },
    label: {
        // fontWeight: '700',
        color: COLORS.LIGHT_BLACK
    },
    leftAlign: {
        textAlign: 'left'
    },
    descriptionContent: {
        justifyContent: 'space-between',
        alignItems: 'center'
    },
    goku: {
        position:"relative",
        top: '1%',
        alignSelf: 'flex-end',
        paddingRight:20,
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom:7,
        // marginHorizontal: '1%',
    },
    badge: {
        position: 'absolute',
        // top: 0,
        right:12,
        color: '#fff',
        fontWeight: '800',
        zIndex: 1
    },
    iconButton: {
        position: 'relative',
        width:45,
        height:45,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: COLORS.DEFAULT,
        borderRadius: 55 / 2,
    },
    imageIcon: {
        width: 35,
        height: 35,
        resizeMode: 'contain',
    },
    item: {
        flex: 1,
        flexDirection: 'row',
        backgroundColor: COLORS.DEFAULT,
        padding: 5,
        marginTop:10,
        marginVertical: 3,
        marginHorizontal: 15,
        borderRadius: 10,
    },
    itemHeader: {
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
    },
    image: {
        width: 140,
        height: 80,
        resizeMode: 'contain',
        borderRadius: 30
    },
    row: {
        flex: 1,
        width: '100%',
        flexDirection: 'row',
        justifyContent: 'flex-start',
        alignItems: 'center',
        
    },
    title: {

        fontSize: 16,
        fontWeight: 'bold'
    },
   
    text: {
        color: COLORS.BLACK,
        fontSize: 12,
        fontWeight:'700',
        fontFamily: "Poppins-medium",
      
    }, 
    signInButton: {
        width: screenWidth/3.5 ,
        height: 30,
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'flex-end',
        borderRadius: 5,
        backgroundColor: COLORS.DEFAULT,
        fontFamily: "Poppins-Regular",
        color: 'black',
    },
    buttonText: {
        color: COLORS.BUTTON_TEXT,
        fontSize: 12,
        fontWeight: '500',
        textAlign: 'center',
        fontFamily: "Poppins-Regular",
    }, 
    rows: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
    },
    noDataFoundContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    text1s: {
        color: COLORS.ERROR,
        fontSize: 14, 
        margin:5,
        fontWeight:'700',
        fontFamily: "Poppins-medium",
      
    },
    text2s: {
        color: COLORS.SUCCESS,
        fontSize: 14, 
        margin:5,
        fontWeight:'700',
        fontFamily: "Poppins-medium",
      
    },
    signInButtons: {
        marginTop:10,
         width: screenWidth/2.5 ,
        height: 30,
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'flex-end',
        borderRadius: 5,
        backgroundColor: COLORS.DEFAULT,
        fontFamily: "Poppins-Regular",
        color: 'black',
    },
    noDataFoundText: {
        color: COLORS.DEFAULT,
        fontSize: 14,
        fontFamily: "Poppins-medium",
    }
});

const mapStateToProps = (state) => {
    return {
        chessis:state.Chessis_no,   
    };
}

const mapDispatchToProps = (dispatch) => {
    return {
        userInfo: bindActionCreators(userInfo, dispatch)
    };
}
  
export default connect(mapStateToProps,mapDispatchToProps)(Document);
  



  TouchableOpacity//User selection between SignIn & Create Account Screen
import React, { Component } from 'react'
import { Text, View, ScrollView, TouchableOpacity, TextInput, Image, CheckBox,Dimensions, ActivityIndicator, Alert } from 'react-native'
//Library
import messaging from '@react-native-firebase/messaging';
import * as Animatable from 'react-native-animatable';
import MaterialIcon from 'react-native-vector-icons/MaterialIcons';
import LinearGradient from 'react-native-linear-gradient';
import { showMessage, hideMessage } from "react-native-flash-message";
import { KeyboardAwareScrollView } from "react-native-keyboard-aware-scroll-view";
//Components
import Header from '../../../components/Header';
import Checkbox from '../../../components/Checkbox';
//API
import HttpRequest from '../../../utils/HTTPRequest';
//Styles
import styles from './styles';
//Redux
import { connect } from 'react-redux';
import { userInfo } from '../../../Redux/Actions/Actions';
import { bindActionCreators } from 'redux';
import AsyncStorage from "../../../utils/AsyncStorage";

import { strings } from '../../../utils/translations';
import { Images } from '../../../constants';
import ImagePicker from 'react-native-image-picker';
import * as Progress from 'react-native-progress';
import axios from "axios";
import { SelectList } from 'react-native-dropdown-select-list'

const { width, height } = Dimensions.get('window');

 class Updatedata extends Component {
  constructor(props) {
    super(props);

    this.onFocus = this.onFocus.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.onChangeText = this.onChangeText.bind(this);
    this.onSubmitName = this.onSubmitName.bind(this);
    this.onSubmitBattery = this.onSubmitBattery.bind(this);
    this.onSubmitPhone = this.onSubmitPhone.bind(this);
    this.onSubmitPassword = this.onSubmitPassword.bind(this);
    this.onSubmitEmail = this.onSubmitEmail.bind(this);
    this.onRefId = this.onRefId.bind(this);

    this.onAccessoryPress1 = this.onAccessoryPress1.bind(this);
    this.onAccessoryPress2 = this.onAccessoryPress2.bind(this);

    this.motorRef = this.updateRef.bind(this, 'motor_no');
    this.batteryRef = this.updateRef.bind(this, 'battery');
    this.controllerRef = this.updateRef.bind(this, 'controller');
    this.convertorRef = this.updateRef.bind(this, 'convertor');
    this.ignitionRef = this.updateRef.bind(this, 'ignition_lock');
    this.differentialRef = this.updateRef.bind(this, 'differntial');
    this.fmRef = this.updateRef.bind(this, 'fm');
    this.rimRef = this.updateRef.bind(this, 'rim');
    this.speedometerRef = this.updateRef.bind(this, 'speedometer');
    this.front_shockerRef = this.updateRef.bind(this, 'front_shocker');
    this.tyreRef = this.updateRef.bind(this, 'tyre');
    this.throttleRef = this.updateRef.bind(this, 'throttle');
    this.hornRef = this.updateRef.bind(this, 'horn');
    this.chargerRef = this.updateRef.bind(this, 'charger');
    

    this.renderPasswordAccessory1 = this.renderPasswordAccessory1.bind(this);
    this.renderPasswordAccessory2 = this.renderPasswordAccessory2.bind(this);


    this.state = {
      secureTextEntry: true,
      isLoading: false,
      document_type:[],
      customer_name: "",
      motor_no:"",
       battery:"",
       controller:"",
       ignition_lock:"",
       differntial:"",
       fm:"",
       rim:"",
       speedometer:"",
       front_shocker:"",
       tyre:"",
       throttle:"",
       horn:"",
       charger:"",
      userInfo: null,
      loginToken: null,
      deviceToken: null,
      secureTextEntry1: true,
      secureTextEntry2: true,
      isSelected: false
    };
  }
  componentDidMount = () => {
    this.document();
    this.aisekaise();
    this._getChargingStation = this.props.navigation.addListener('focus', () => {
      AsyncStorage.getDealer_pass_key().then(result => {
        // console.log('toggle', val);
        if (result != null && result != '') {
          console.log('passkey', result);

          this.setState({
            passkey: result
          });
         
        }

      });

      // this.getCurrentLocation();
      // this.dealervalue();
      // this.getChargingStations();


    });
    //   this.tokenn();

  }

  componentWillUnmount() {
    this._getChargingStation();
  }

  onChangeText(text) {
      console.log('ttt',text);
      ['customer_name', 'customer_contact','refId']
    // ['battery','motor_no','controller','convertor','ignition_lock','differntial','fm','rim','speedometer','front_shocker','tyre','throttle','horn','charger']
      .map((name) => ({ name, ref: this[name] }))
      .forEach(({ name, ref }) => {
        if (ref.isFocused()) {
            console.log('iii',name);
            console.log('thkt',text);
          this.setState({ [name]: text });
         
        }
      });
  }
  aisekaise ()
  {
      let{props}=this;
      console.log('ppod',props.chessis);
    HttpRequest.dealer_sale_details({chessis_no:props.chessis})
    .then(res => {
      this.setState({ isLoading: false });
      //  console.log("Phone Number Check api response ---------- ", res);
      const result = res.data;
     console.log("Dealer slaes api response ---------- ", result);
      if (res.status == 200 && result.error==false) {
       console.log("service list",result.data[0].chassis_no);
       this.setState({chassis_no:result.data[0].chassis_no})
      // console.log(this.state.Service_Type,'service');
      //  this.props.navigation.navigate("serviceotp",{mobile:this.state.customer_contact,chessis_no:this.state.customer_name,Service_Type:this.state.Service_Type,Service_Detail:this.state.Service_Detail});
         
      }
      else {
          Alert.alert("Alert",result.message);
          // this.props.navigation.navigate("OtpVerification", { mobile: phone, type: 0, formData: { name: name, phone: phone, password: password,email:email,refId:refId,device_token:deviceToken, role: 1 } });
      }
    })
    .catch(err => {
      this.setState({ isLoading: false });
      console.log("Dealer sales API Catch Exception: ",err);
      showMessage({
        message: strings.signIn.response.error.title,
        description: strings.signIn.response.error.message,
        type: "danger",
      });
    });

  }
  onFocus() {
    let { errors = {} } = this.state;
    for (let name in errors) {
      let ref = this[name];

      if (ref && ref.isFocused()) {
        delete errors[name];
      }
    }

    this.setState({ errors });
  }

 

  onAccessoryPress1() {
    this.setState(({ secureTextEntry1 }) => ({ secureTextEntry1: !secureTextEntry1 }));
  }

  onAccessoryPress2() {
    this.setState(({ secureTextEntry2 }) => ({ secureTextEntry2: !secureTextEntry2 }));
  }
  onSubmitName() {
    this.phone.focus();
  }

  onSubmitBattery() {
    this.phone.focus();
  }

  onSubmitPhone() {
    this.password.focus();
  }

  onSubmitPassword() {
    this.repeatPass.focus();
  }
  onSubmitEmail() {
    this.email.focus();
  }
  onRefId() {
    this.refral.focus();
    this.onSubmit();
  }

  tokenn() {
    messaging().getToken().then(token => {
      // this.props.deviceToken(token);
      this.setState({ deviceToken: token })
      console.log(this.state.deviceToken, 'asdfgh');
    });
  }

  onSubmit(item) {
    console.log('sign ue', this.state.passkey);

    let errors = {};
    let { isSelected } = this.state;
    let reg = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;

    //     ['customer_name', 'customer_contact','customer_doc_no']
    //       .forEach((name) => {
    //         let value = this.state[name];

    //         if (!value) {
    //           errors[name] = strings.error.emptyError;
    //           console.log('sign ue1',);
    //         } 
    //         else {
    //           if ('customer_contact' === name && value.length < 10 ) {
    //             errors[name] = strings.error.phoneError;
    //           } else if ('customer_name' === name && value.length < 6) {
    //             errors[name] = strings.error.name;
    //           }
    //            else if ('repeatPass' === name && value.length < 6) {
    //             errors[name] = strings.error.passwordLengthError;
    //           } else if('repeatPass' === name && value !== this.state.password){
    //             errors[name] = strings.error.passwordUnmatchedError;
    //           }
    // //         //   else if ('email' === name && reg.test(this.state.email)===false ){
    // //         //      console.log('sign ue',this.state.email);
    // //         //     errors[name] = strings.error.emailLengthError;
    // //         //    }
    // //           //  else if ('refId' === name && value==) {
    // //           //   errors[name] = strings.error.passwordLengthError;
    // //           // }
    //         }
    //       });

    //     this.setState({ errors });
    //     if(Object.entries(errors).length === 0 && isSelected){
    //       console.log('sign ue3',);
     this.onSignupPressed(item);
    //     } else if(Object.entries(errors).length === 0 && !isSelected) {
    //       showMessage({
    //           message: strings.error.warningTitle,
    //           description: strings.error.termsAndConditions,
    //           type: "warning",
    //           duration: 2000
    //         });
      // }
  }

  updateRef(name, ref) {
    this[name] = ref;
  }



  document ()
  {
    HttpRequest.document_type()
    .then(res => {
      this.setState({ isLoading: false });
      //  console.log("Phone Number Check api response ---------- ", res);
      const result = res.data;
      console.log("Service list api response ---------- ", result);
      if (res.status == 200 && result.error==false) {
      // console.log("service list",result.data);
       this.setState({document_type:result.data})
      // console.log(this.state.Service_Type,'service');
      //  this.props.navigation.navigate("serviceotp",{mobile:this.state.customer_contact,chessis_no:this.state.customer_name,Service_Type:this.state.Service_Type,Service_Detail:this.state.Service_Detail});
         
      }
      else {
          Alert.alert("Alert",result.message);
          // this.props.navigation.navigate("OtpVerification", { mobile: phone, type: 0, formData: { name: name, phone: phone, password: password,email:email,refId:refId,device_token:deviceToken, role: 1 } });
      }
    })
    .catch(err => {
      this.setState({ isLoading: false });
      console.log("Phone Number Check API Catch Exception: ",err);
      showMessage({
        message: strings.signIn.response.error.title,
        description: strings.signIn.response.error.message,
        type: "danger",
      });
    });

  }
  renderPasswordAccessory1() {
    let { secureTextEntry1 } = this.state;

    let name = secureTextEntry1 ?
      'visibility-off' :
      'visibility';

    return (
      <MaterialIcon
        size={20}
        name={name}
        color={'#05294b'}
        style={styles.icon}
        onPress={this.onAccessoryPress1}
        suppressHighlighting={true}
      />
    );
  }

  renderPasswordAccessory2() {
    let { secureTextEntry2 } = this.state;

    let name = secureTextEntry2 ?
      'visibility-off' :
      'visibility';

    return (
      <MaterialIcon
        size={20}
        name={name}
        color={'#05294b'}
        style={styles.icon}
        onPress={this.onAccessoryPress2}
        suppressHighlighting={true}
      />
    );
  }

  // Self User Signup Through Api
  onSignupPressed = (item) => {

    let {chargingPointData, filePath} = this.state;
    //  this.setState({chargingPointData:this.state.tax});
     console.log('ok',this.state.filePath.fileName);
    if (filePath == null || filePath =="") {
       
      Alert.alert("Please Select payment proof");
      console.log('ok1');
  }else{
    console.log('pics',this.state.filePath);
      var pics=filePath.data;
      
      
      //If file selected then create FormData
      // const fileToUpload = filePath;
      // console.log('datas',filePath)
      // const files = new FormData();
      // // datas.append('name', 'Image Upload');
      // files.append(fileToUpload);
      //  console.log('datas',fileToUpload)
      //  this.uploadProgress(files);
      this.setState({isLoading:true});
  axios.post('https://mobility.efillelectric.com/api/v1/distributor-sell-record', { temp_no:this.state.refId,order_id: item.order_id, stock_id: item.stock_id, files:pics, distributor_code: this.state.passkey, customer_name: this.state.customer_name, customer_contact: this.state.customer_contact, customer_doc_type: this.state.customer_doc_type}, {
      onUploadProgress: progressEvent => {
          //  AsyncStorage.clearDealer_vehicle_storage();
        var percentComplete = progressEvent.loaded / progressEvent.total
        percentComplete = parseInt(percentComplete * 100);
        console.log(percentComplete);
      this.setState({percentage:percentComplete});
      // if(percentComplete=="100"){
      //     this.setState({isLoading:true});
          
      // }
      
      //   this.uploadProgress(percentComplete);
       // updateProgress(percentComplete);
      }
    }).then(response => {
      this.setState({isLoading:true})
      const result=response.data;
      console.log('ok2',response)
  if(result.status==1 && result.error==false)
  this.setState({isLoading:false});
  this.props.navigation.navigate('Dealers');
  });
    
}
    // if (filePath != null) {
    //   // console.log('okkkk',this.state.passkey);
    //   //If file selected then create FormData
    //   const fileToUpload = filePath;
    //   const files = new FormData();
    //   // datas.append('name', 'Image Upload');
    //   files.append(fileToUpload);

    //   // let { customer_name, customer_contact, customer_doc_no ,customer_doc_type,} = this.state;
    //   console.log('pressed', this.state.data);
    //   // console.log('itempaas',item);
    //   // this.setState({ isLoading: true });
    //   HttpRequest.dealer_sellrecords({ order_id: item.order_id, stock_id: item.stock_id, formData: files, distributor_code: this.state.passkey, customer_name: this.state.customer_name, customer_contact: this.state.customer_contact, customer_doc_type: this.state.customer_doc_type })
    //     .then(res => {
    //       this.setState({ isLoading: false });
    //       //  console.log("Phone Number Check api response ---------- ", res);
    //       const result = res.data;
    //       console.log("Phone Number Check api response ---------- ", result);
    //       if (res.status == 200 && result.error == false) {
    //         console.log("result", result);
    //         this.props.navigation.navigate("Dealers");
    //         // Alert.alert("Alert",result.message);
    //       }
    //       // else {

    //       //     // this.props.navigation.navigate("OtpVerification", { mobile: phone, type: 0, formData: { name: name, phone: phone, password: password,email:email,refId:refId,device_token:deviceToken, role: 1 } });
    //       // }
    //     })
    //     .catch(err => {
    //       this.setState({ isLoading: false });
    //       console.log("Phone Number Check API Catch Exception: ", err);
    //       showMessage({
    //         message: strings.signIn.response.error.title,
    //         description: strings.signIn.response.error.message,
    //         type: "danger",
    //       });
    //     });
    // };

  };

  handleCheckbox = (checkbox) => {
    this.setState({ isSelected: checkbox });
  }

  labelCheck = () => {
    let { isSelected } = this.state;
    this.setState({ isSelected: !isSelected });
  }

  render() {
    let { navigation } = this.props;
    let { item } = this.props.route.params;
    //  console.log('chasss',this.state.chassis_no);
    let { isLoading, errors = {}, chassis_no,  customer_name, refId, battery,rim,charger,motor_no,customer_doc_no, customer_contact, isSelected } = this.state;
    const errorName = errors.customer_name == undefined ? '#808080' : '#ff0000';
    const errorPhone = errors.customer_contact == undefined ? '#808080' : '#ff0000';
    const errorPassword = errors.password == undefined ? '#808080' : '#ff0000';
    const errorRfId = errors.efid == undefined ? '#808080' : '#ff0000';
    const errorEmail = errors.email == undefined ? '#808080' : '#ff0000';
    //  console.log(errors.name);
    return (
      <View style={styles.container}>
        <View style={styles.header}>
          <Header navigation={navigation} type={strings.dmc.vehicle_forms} />
        </View>
        <Animatable.View animation="fadeInUpBig" style={styles.footer}>
          <KeyboardAwareScrollView enableOnAndroid={true} extraHeight={130} extraScrollHeight={130} contentContainerStyle={styles.scrollView}>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.chassis_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                //   ref={this.battery}
                  
                  autoCapitalize='none'
                  editable={false}
                   selectTextOnFocus={false}
                  autoCompleteType='off'
                  autoCorrect={false}
                  enablesReturnKeyAutomatically={true}
                  onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitName}
                  returnKeyType='next'
                  value={chassis_no}
                  placeholderTextColor={errorName}
                  style={[styles.inputText, { color: errorName }]}
                />
              </View>
              {errors.customer_name != undefined &&
                <Text style={styles.error}>{errors.customer_name}</Text>
              }
             
            </View>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.battery_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                 ref={this.batteryRef}
                  placeholder={strings.corporateUser.phoneNumber}
                  keyboardType="numeric"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}
                  keyboardType={'default'}
                  enablesReturnKeyAutomatically={true}
                 onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_name}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {errors.customer_contact != undefined &&
                <Text style={styles.error}>{errors.customer_contact}</Text>
              }
            </View>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.motor_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  ref={this.motorRef}
                  placeholder={strings.corporateUser.phoneNumber}
                  keyboardType="numeric"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}
                  keyboardType={'default'}
                  enablesReturnKeyAutomatically={true}
                  onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_contact}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {errors.customer_contact != undefined &&
                <Text style={styles.error}>{errors.customer_contact}</Text>
              }
            </View>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.controller_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  ref={this.controllerRef}
                  placeholder={strings.corporateUser.phoneNumber}
                  keyboardType="numeric"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}
                  keyboardType={'default'}
                  enablesReturnKeyAutomatically={true}
                  onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_contact}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {errors.customer_contact != undefined &&
                <Text style={styles.error}>{errors.customer_contact}</Text>
              }
            </View>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.converter_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  ref={this.convertorRef}
                  placeholder={strings.corporateUser.phoneNumber}
                  keyboardType="numeric"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}
                  keyboardType={'default'}
                  enablesReturnKeyAutomatically={true}
                  onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_contact}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {errors.customer_contact != undefined &&
                <Text style={styles.error}>{errors.customer_contact}</Text>
              }
            </View>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.ignition_lock_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  ref={this.ignitionRef}
                  placeholder={strings.corporateUser.phoneNumber}
                  keyboardType="numeric"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}
                  keyboardType={'default'}
                  enablesReturnKeyAutomatically={true}
                  onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_contact}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {errors.customer_contact != undefined &&
                <Text style={styles.error}>{errors.customer_contact}</Text>
              }
            </View>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.differential_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  ref={this.differentialRef}
                  placeholder={strings.corporateUser.phoneNumber}
                  keyboardType="numeric"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}
                  keyboardType={'default'}
                  enablesReturnKeyAutomatically={true}
                  onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_contact}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {errors.customer_contact != undefined &&
                <Text style={styles.error}>{errors.customer_contact}</Text>
              }
            </View>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.fm_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  ref={this.fm}
                  placeholder={strings.corporateUser.phoneNumber}
                  keyboardType="numeric"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}
                  keyboardType={'default'}
                  enablesReturnKeyAutomatically={true}
                //   onFocus={this.onFocus}
                //   onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_contact}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {errors.customer_contact != undefined &&
                <Text style={styles.error}>{errors.customer_contact}</Text>
              }
            </View>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.rim_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  ref={this.rim}
                  placeholder={strings.corporateUser.phoneNumber}
                  keyboardType="numeric"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}
                  keyboardType={'default'}
                  enablesReturnKeyAutomatically={true}
                  onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_contact}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {errors.customer_contact != undefined &&
                <Text style={styles.error}>{errors.customer_contact}</Text>
              }
            </View>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.speedometer_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  ref={this.speedometer}
                  placeholder={strings.corporateUser.phoneNumber}
                  keyboardType="numeric"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}
                  keyboardType={'default'}
                  enablesReturnKeyAutomatically={true}
                  onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_contact}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {errors.customer_contact != undefined &&
                <Text style={styles.error}>{errors.customer_contact}</Text>
              }
            </View>
            <View style={styles.formField}>
              <Text style={styles.label}>{strings.dmc.update.front_shocker_no}</Text>
              <View style={styles.inputContainer}>
                <TextInput
                  ref={this.front_shocker}
                  placeholder={strings.corporateUser.phoneNumber}
                  keyboardType="numeric"
                  autoCapitalize='none'
                  autoCompleteType='off'
                  autoCorrect={false}
                  keyboardType={'default'}
                  enablesReturnKeyAutomatically={true}
                  onFocus={this.onFocus}
                  onChangeText={this.onChangeText}
                  // onSubmitEditing={this.onSubmitPhone}
                  returnKeyType='next'
                  value={customer_contact}
                  placeholderTextColor={errorPhone}
                  style={[styles.inputText, { color: errorPhone }]}
                />
              </View>
              {errors.customer_contact != undefined &&
                <Text style={styles.error}>{errors.customer_contact}</Text>
              }
            </View>

            <View style={styles.formField}>
                        <Text style={styles.label}>{strings.dmc.update.tyre_no}</Text>
                        <View style={styles.inputContainer}>
                        <TextInput
                                ref={this.tyre}
                                placeholder='Enter documnet number'
                                autoCapitalize='none'
                                autoCompleteType='off'
                                autoCorrect={false}
                                enablesReturnKeyAutomatically={true}
                                
                                returnKeyType='next'
                                value={customer_doc_no}
                                placeholderTextColor={errorEmail}
                                style={[styles.inputText,{ color: errorEmail}]}
                            />
                                
                        </View>
                        {errors.email != undefined &&
                        <Text style={styles.error}>{errors.email}</Text>
                        }
                    </View>
                    <View style={styles.formField}>
                        <Text style={styles.label}>{strings.dmc.update.throttle_no}</Text>
                        <View style={styles.inputContainer}>
                        <TextInput
                                ref={this.throttle}
                                placeholder='Temp. RC Number'
                                autoCapitalize='none'
                                autoCompleteType='off'
                                autoCorrect={false}
                                enablesReturnKeyAutomatically={true}
                                onFocus={this.onFocus}
                                onChangeText={this.onChangeText}
                                // onSubmitEditing={this.onRefId}
                                returnKeyType='next'
                                value={refId}
                                // placeholderTextColor={errorRfId}
                                style={[styles.inputText,{ color: errorRfId}]}
                            />
                                
                        </View>
                        {errors.email != undefined &&
                        <Text style={styles.error}>{errors.email}</Text> 
                        }
            </View>
            <View style={styles.formField}>
                        <Text style={styles.label}>{strings.dmc.update.horn_no}</Text>
                        <View style={styles.inputContainer}>
                        <TextInput
                                ref={this.horn}
                                placeholder='Temp. RC Number'
                                autoCapitalize='none'
                                autoCompleteType='off'
                                autoCorrect={false}
                                enablesReturnKeyAutomatically={true}
                                onFocus={this.onFocus}
                                onChangeText={this.onChangeText}
                                // onSubmitEditing={this.onRefId}
                                returnKeyType='next'
                                value={refId}
                                // placeholderTextColor={errorRfId}
                                style={[styles.inputText,{ color: errorRfId}]}
                            />
                                
                        </View>
                        {errors.email != undefined &&
                        <Text style={styles.error}>{errors.email}</Text> 
                        }
            </View>
            <View style={styles.formField}>
                        <Text style={styles.label}>{strings.dmc.update.charger_no}</Text>
                        <View style={styles.inputContainer}>
                        <TextInput
                                ref={this.charger}
                                placeholder='Temp. RC Number'
                                autoCapitalize='none'
                                autoCompleteType='off'
                                autoCorrect={false}
                                enablesReturnKeyAutomatically={true}
                                onFocus={this.onFocus}
                                onChangeText={this.onChangeText}
                                // onSubmitEditing={this.onRefId}
                                returnKeyType='next'
                                value={refId}
                                // placeholderTextColor={errorRfId}
                                style={[styles.inputText,{ color: errorRfId}]}
                            />
                                
                        </View>
                        {errors.email != undefined &&
                        <Text style={styles.error}>{errors.email}</Text> 
                        }
            </View>
        
             
             
             
             
            {/* <View style={styles.checkboxContainer}>
                                            <Checkbox onCheckBoxToggle={this.handleCheckbox} status={this.state.isSelected}/>
                                            <TouchableOpacity activeOpacity={1} onPress={() => this.labelCheck() }>
                                              <Text style={styles.checkboxLabel}>{strings.selfUser.iAccept}</Text>
                                            </TouchableOpacity>
                                        </View> */}
            {/* {filePath != '' ?
              <Image
                source={{ uri: filePath.uri }}
                style={styles.imageStyle}
              />
              : null}
               <Text style={{textAlign:'center',fontWeight:'800',color:'#fff',marginTop:10}}>{percentage}</Text>
                    <View style={{paddingTop:10,justifyContent:'center',alignContent:'center',}}>
                    {percentage!=''?
                    <Progress.Bar progress={percentage}  width={width-40}/>
                    :null}
                    </View> */}
                    {/* <View style={styles.availabilityIconContainer}>
            <TouchableOpacity onPress={!isLoading ? () => this.Scanner() : null}>
              <LinearGradient start={{ x: 0, y: 0 }} end={{ x: 1, y: 0 }} colors={['#A4FF8B', '#22BC9D']} style={styles.IconButton}>
                {isLoading ? <ActivityIndicator size='large' color='#fff' /> :
                 <Image source={Images.camera} style={styles.imageIcon} />
                }
              </LinearGradient>
            </TouchableOpacity>
            </View> */}
            <TouchableOpacity onPress={!isLoading ? () => this.onSubmit(item) : null}>
              <LinearGradient start={{ x: 0, y: 0 }} end={{ x: 1, y: 0 }} colors={['#A4FF8B', '#22BC9D']} style={styles.signInButton}>
                {isLoading ? <ActivityIndicator size='large' color='#fff' /> :
                  <Text style={styles.buttonText}>Submit</Text>
                }
              </LinearGradient>
            </TouchableOpacity>
          </KeyboardAwareScrollView>
        </Animatable.View>
      </View>
    )
  }
}

const mapStateToProps = state => {

    return {
      chessis: state.Chessis_no,
      info: state.info,
    };
  };
  
  
  const mapDispatchToProps = (dispatch) => {
    return {
      userInfo: bindActionCreators(userInfo, dispatch),
     
    }
  
  }
  export default connect(mapStateToProps, mapDispatchToProps)(Updatedata);